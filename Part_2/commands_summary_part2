commands for Part_2:
rostopic pub cmd_vel geometry_msgs/Twist '{ linear :{ x : 0.5 , y : 0.0 , z : 0.0} , angular: { x : 0.0 , y : 0.0 , z : 0.3}}'
rostopic pub cmd_vel geometry_msgs/Twist '{ linear :{ x : 0.0 , y : 0.0 , z : 0.0} , angular: { x : 0.0 , y : 0.0 , z : 0.3}}'

Chapter 3:
in package: exmpl_models
examine rect_prism; note link fields


copy over folder: minimal_robot_description
 examine: minimal_robot_description.urdf
 check_urdf minimal_robot_description.urdf
 
 Gazebo:
 roslaunch gazebo_ros empty_world.launch  (launches a roscore, if needed)
 
 from .../exmpl_models/rect_prism
 rosrun gazebo_ros spawn_model -file model-1_4.sdf -sdf -model rect_prism 
alt: (if in a ROS package)
  rosrun gazebo_ros spawn_model - file (rospack find exmpl_models)/rect_prism/model-1 _4 .sdf -sdf -model rect_prism
or launch file.

in Gazebo, set physics->gravity to zero
roslaunch exmpl_models add_rect_prism.launch

roslaunch exmpl_models add_cylinder.launch
see "models" menu; expand to see details
rosservice list
rosservice info gazebo/set_model_state
see: gazebo_msgs/srv/SetModelState.srv
rosmsg show gazebo_msgs/ModelState
rosservice call /gazebo/set_model_state '{model_state: {model_name: rect_prism, pose: {position:{z: 4.0}}}}'
(falls, unless gravity turned off)
rosservice call /gazebo/set_model_state '{model_state: {model_name: rect_prism, twist: {angular:{z: 1.0}}}}'
(need to remove ground plane, as this sets height to zero)
rosservice call /gazebo/set_model_state '{model_state: {model_name: rect_prism, pose: {position:{z: 4.0}}, twist: {angular:{z: 1.0}}}}'
(sets both pose and twist)

see code example_gazebo_set_state for programmatic method

turn off gravity;
roslaunch exmpl_models add_rect_prism.launch
roslaunch exmpl_models add_cylinder.launch
rosrun example_gazebo_set_state example_gazebo_set_prism_state

rostopic echo gazebo/model_states

ROBOT MODEL IN GAZEBO:
kill and restart gazebo;
spawn robot model into Gazebo using terminal command: 
roscd minimal_robot_description
rosrun gazebo_ros spawn_model -urdf -file minimal_robot_description.urdf -model one_DOF
rostopic list
rostopic echo gazebo/link_states

spawn robot model into Gazebo using rospack-find to locate the model's directory:
rosrun gazebo_ros spawn_model -urdf -file $(rospack find minimal_robot_description)/minimal_robot_description.urdf -model one_DOF

OR, first put on the parameter server, e.g. with launch file:
roslaunch minimal_robot_description minimal_robot_description.launch 

observe that robot is stored on parameter server with
rosparam list
rosparam get /robot_description

THEN, spawn into Gazebo from parameter server with (terminal command):
rosrun gazebo_ros spawn_model -param robot_description -urdf -model one_DOF_robot

OR, put these both in a launch file; see, e.g. minimal_robot_w_jnt_ctl.launch

rosrun minimal_joint_controller minimal_joint_controller
(similar to what is required to make a ROS interface to a robot)
  get sensor values and publish these on "joint_states"
  subscribe to jnt_cmd and use this as setpoint in feedback algorithm
  compute torque corrections and send these to physical interface to motor(s) in tight servo loop
  
  rostopic pub pos_cmd std_msgs/Float64 1.0
  rostopic pub -r 10 pos_cmd std_msgs/Float64 1.0  (better for rqt_plot)
  
  rostopic pub -r 10 pos_cmd std_msgs/Float64 0.0
  rostopic pub -r 10 pos_cmd std_msgs/Float64 -- -1.0 (need -- to note use of negative numbers)
  
  rqt_plot w/: /pos_cmd, /jnt_pos, 

roslaunch minimal_robot_description minimal_robot_w_jnt_ctl.launch 
rostopic list
rostopic pub -r 10 /one_DOF_robot/joint1_position_controller/command std_msgs/Float64 1.0
rqt_plot
add obstacle

(wrap-up, Baxter, DaVinci and Atlas models)

Chapter 4:
arm example: copy over directory arm7dof (from Part_5)

catkin_make

roslaunch gazebo_ros empty_world.launch
roslaunch arm7dof_model arm7dof_w_pos_controller.launch 
rostopic list
rostopic pub /arm7dof/joint1_position_controller/command std_msgs/Float64 1.0
rostopic echo tf
rosrun tf tf_echo world link8

Eigen:
copy over package: example_eigen from Part_2
catkin_make
rosrun example_eigen example_eigen_plane_fit 
note edits to CMakeLists.txt for Eigen
Eigen example code...
  Eigen::Vector3d normal_vec(1,2,3);
  normal_vec/=normal_vec.norm();
  Eigen::Matrix3d Rot_z;
    Rot_z.row(0)<<0,-1,0;
    v1 = Rot_z*normal_vec; 
    double dotprod = v1.dot(normal_vec);
    v2 = v1.cross(normal_vec);
    Eigen::MatrixXd points_mat(3,npts);
    rand_vec.setRandom(2,1);
    Eigen::MatrixXd Noise = Eigen::MatrixXd::Random(3,npts);
    points_mat = points_mat + Noise*g_noise_gain; 
    Eigen::VectorXd evals; 
    cout << "The eigenvalues of CoVar are:" << endl << es3d.eigenvalues().transpose() << endl;
    Eigen::Vector3d x_soln = A.fullPivLu().solve(ones_vec);

Ch5: rviz
roslaunch gazebo_ros empty_world.launch
roslaunch arm7dof_model arm7dof_w_pos_controller.launch 
rosrun rviz rviz
  set displays (can save config)
  more useful w/ sensors (see figs, Ch5)
  
Can make interactive markers, e.g. 6DOF mouse--can be used to set attractor pose or pt of interest

Can select pts from pointcloud; can find centroids, normals;   
  

 

 
 



