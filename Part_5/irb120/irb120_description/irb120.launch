<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--arg name="world_name" value="$(find abby_gazebo)/worlds/abby.world"/-->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find irb120_description)/urdf/irb120.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model irb120 -param robot_description"/>

  <!-- ros_control launch file -->
  <include file="$(find irb120_control)/launch/irb120_control.launch">
 </include>
  <!-- static transforms -->
  <include file="$(find irb120_planner)/launch/irb120_static_transforms.launch">
 </include>  
  <!-- run node to emulate ROS-I interface publish/subscribe -->
  <!--rosrun irb120_ctl_interface irb120_ctl_interface -->
  <node name = "irb120_ctl_interface" pkg = "irb120_ctl_interface" type = "irb120_ctl_interface" output= "screen"/>

</launch>
